{"version":3,"sources":["reduxs/ActionTypes.js","Users/User.js","Users/UsersInfo.js","App.js","serviceWorker.js","reduxs/reducers.js","index.js"],"names":["ActionTypes","INC_COUNTER","DEC_COUNTER","ADD_USERS","SELECTED_USER","User","this","props","getUsers","console","log","users","className","map","s","i","onClick","SetSelectedItemID","id","key","value","name","Component","connect","state","dispatch","fetch","then","response","json","userinfo","type","SelectedUser","UsersInfo","for","disabled","Name","Email","Address","City","GetUser","App","Counter","onIncrement","onDecrement","Boolean","window","location","hostname","match","reducers","action","newstate","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6f517ef7.chunk.js","sourcesContent":["const ActionTypes = {\r\n    INC_COUNTER: \"increment\",\r\n    DEC_COUNTER: \"decrement\",\r\n    ADD_USERS: \"AddUsers\",\r\n    SELECTED_USER: \"SelectedUser\"\r\n}\r\n\r\nexport default ActionTypes;","import React, { Component } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport { connect } from 'react-redux'\r\nimport ActionTypes from '../reduxs/ActionTypes'\r\nclass User extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers();\r\n    }\r\n    render() {\r\n        console.log(this.props.users)\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>Users</h1>\r\n                <div className=\"row\">\r\n                    <div className=\"card\">\r\n                        <ul className=\"list-group\">\r\n                            {this.props.users.map((s, i) =>\r\n                                (\r\n                                    <a onClick={() => this.props.SetSelectedItemID(s.id)} key={i} className=\"list-group-item list-group-item-action\" value={s.id}>{s.name}</a>\r\n                                )\r\n                            )\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\nconst mapStateToProps = function (state) {\r\n    return {\r\n        users: state.users\r\n    }\r\n}\r\nconst mapDispatchToProps = function (dispatch) {\r\n    return {\r\n        SetSelectedItemID: (id) => {\r\n            if (id === 0) return\r\n            fetch(\"https://jsonplaceholder.typicode.com/users/\" + id)\r\n                .then((response) => { return response.json() })\r\n                .then((userinfo) => {\r\n                    dispatch({ type: ActionTypes.SELECTED_USER, SelectedUser: userinfo })\r\n                })\r\n        },\r\n        getUsers: () => {\r\n            fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n                .then((response) => {\r\n                    return response.json()\r\n                })\r\n                .then((json) => {\r\n                    dispatch({\r\n                        type: ActionTypes.ADD_USERS,\r\n                        users: json\r\n                    })\r\n                });\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(User);","import React, { Component } from 'react'\r\nimport ActionTypes from '../reduxs/ActionTypes';\r\nimport { connect } from 'react-redux'\r\nclass UsersInfo extends Component {\r\n    componentDidMount() {\r\n        console.log(this.props)\r\n    }\r\n    componentWillReceiveProps() {\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"form\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-4\">\r\n                            <div className=\"form-group\">\r\n                                <label for=\"name\">Name\r\n                            </label>\r\n                                <input type=\"text\" disabled id=\"name\" className=\"form-control\" value={this.props.SelectedUser.Name}></input>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-sm-6\">\r\n                            <div className=\"form-group\">\r\n                                <label for=\"email\">Email\r\n                            </label>\r\n                                <input type=\"email\" id=\"email\" className=\"form-control\" value={this.props.SelectedUser.Email}></input>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-6\">\r\n                            <div className=\"form-group\">\r\n                                <label for=\"Address\">Address\r\n                            </label>\r\n                                <input type=\"text\" id=\"Address\" className=\"form-control\" value={this.props.SelectedUser.Address}></input>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-sm-4\">\r\n                            <div className=\"form-group\">\r\n                                <label for=\"City\">City\r\n                            </label>\r\n                                <input type=\"text\" id=\"City\" className=\"form-control\" value={this.props.SelectedUser.City}></input>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n\r\n}\r\n\r\nconst MapStateToProps = function (state) {\r\n    return { SelectedUser: state.SelectedUser }\r\n}\r\nconst MapDispatchToProps = function (dispatch) {\r\n    return {\r\n        GetUser: (id) => {\r\n\r\n        }\r\n    }\r\n}\r\nexport default connect(MapStateToProps, MapDispatchToProps)(UsersInfo);","import React, { Component } from 'react';\nimport './App.css';\nimport User from './Users/User'\nimport UsersInfo from './Users/UsersInfo'\nimport ActionTypes from './reduxs/ActionTypes';\nimport { connect } from 'react-redux'\nclass App extends Component { \n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-3\">\n            <User></User>\n          </div>\n          <div className=\"col-6\">\n            <UsersInfo></UsersInfo>\n          </div>\n        </div>\n      </div>\n\n\n    )\n  }\n}\nconst mapStateToProps = function (state) {\n  return {\n    Counter: state.Counter\n  }\n}\nconst mapDispatchToProps = function (dispatch) {\n  return {\n    onIncrement: () => dispatch({ type: ActionTypes.INC_COUNTER }),\n    onDecrement: () => dispatch({ type: ActionTypes.DEC_COUNTER })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ActionTypes from './ActionTypes'\r\nfunction reducers(state, action) {\r\n    switch (action.type) {\r\n        case ActionTypes.INC_COUNTER:\r\n            {\r\n                var newstate = { ...state };\r\n                newstate.Counter = newstate.Counter + 1;\r\n                return newstate;\r\n            }\r\n        case ActionTypes.DEC_COUNTER:\r\n            {\r\n                var newstate = { ...state };\r\n                newstate.Counter = newstate.Counter - 1;\r\n                return newstate;\r\n            }\r\n        case ActionTypes.ADD_USERS:\r\n            var newstate = { ...state, users: [...state.users, ...(action.users)] }\r\n            return newstate;\r\n        case ActionTypes.SELECTED_USER:            \r\n            newstate = { ...state, SelectedUser: action.SelectedUser }\r\n            return newstate        \r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default reducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducers from './reduxs/reducers'\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux'\n\nvar initialState = {\n    Counter: 1,\n    users: [],    \n    SelectedUser: {\n        Name: \"\",\n        Email: \"\",\n        Address: \"\",\n        City: \"\"\n    }\n}\n\nconst store = createStore(reducers, initialState);\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}